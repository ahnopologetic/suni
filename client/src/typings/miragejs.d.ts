/** Declaration file generated by dts-gen */
declare module 'miragejs' {
    export class ActiveModelSerializer {
        constructor(...args: any[]);

        getCoalescedIds(...args: any[]): void;

        keyForAttribute(...args: any[]): void;

        keyForEmbeddedRelationship(...args: any[]): void;

        keyForForeignKey(...args: any[]): void;

        keyForModel(...args: any[]): void;

        keyForPolymorphicForeignKeyId(...args: any[]): void;

        keyForPolymorphicForeignKeyType(...args: any[]): void;

        keyForRelationship(...args: any[]): void;

        keyForRelationshipIds(...args: any[]): void;

        normalize(...args: any[]): void;

        static extend(protoProps: any, staticProps: any): any;

    }

    export class Collection {
        constructor(...args: any[]);

        add(...args: any[]): void;

        destroy(...args: any[]): void;

        filter(...args: any[]): void;

        includes(...args: any[]): void;

        mergeCollection(...args: any[]): void;

        reload(...args: any[]): void;

        remove(...args: any[]): void;

        save(...args: any[]): void;

        slice(...args: any[]): void;

        sort(...args: any[]): void;

        toString(...args: any[]): void;

        update(...args: any[]): void;

    }

    export class IdentityManager {
        constructor(...args: any[]);

        fetch(...args: any[]): void;

        get(...args: any[]): void;

        inc(...args: any[]): void;

        reset(...args: any[]): void;

        set(...args: any[]): void;

    }

    export class JSONAPISerializer {
        constructor(...args: any[]);

        getAddToIncludesForResource(...args: any[]): void;

        getAddToIncludesForResourceAndPaths(...args: any[]): void;

        getCoalescedIds(...args: any[]): void;

        getHashForIncludedResource(...args: any[]): void;

        getHashForPrimaryResource(...args: any[]): void;

        getHashForResource(...args: any[]): void;

        getIncludesForResourceAndPath(...args: any[]): void;

        getQueryParamIncludes(...args: any[]): void;

        getResourceObjectForModel(...args: any[]): void;

        hasLinksForRelationship(...args: any[]): void;

        hasQueryParamIncludes(...args: any[]): void;

        keyForAttribute(...args: any[]): void;

        keyForCollection(...args: any[]): void;

        keyForModel(...args: any[]): void;

        keyForRelationship(...args: any[]): void;

        links(...args: any[]): void;

        shouldIncludeLinkageData(...args: any[]): void;

        typeKeyForModel(...args: any[]): void;

        static extend(protoProps: any, staticProps: any): any;

    }

    export class Model {
        constructor(...args: any[]);

        alreadyAssociatedWith(...args: any[]): void;

        associate(...args: any[]): void;

        associationFor(...args: any[]): void;

        destroy(...args: any[]): void;

        disassociate(...args: any[]): void;

        equals(...args: any[]): void;

        hasInverseFor(...args: any[]): void;

        inverseFor(...args: any[]): void;

        isNew(...args: any[]): void;

        isSaved(...args: any[]): void;

        reload(...args: any[]): void;

        save(...args: any[]): void;

        toJSON(...args: any[]): void;

        toString(...args: any[]): void;

        update(...args: any[]): void;

        static extend(protoProps: any, staticProps: any): any;

        static findBelongsToAssociation(associationType: any): any;

    }

    export class Response {
        constructor(...args: any[]);

        toRackResponse(...args: any[]): void;

    }

    export class RestSerializer {
        constructor(...args: any[]);

        getCoalescedIds(...args: any[]): void;

        keyForAttribute(...args: any[]): void;

        keyForEmbeddedRelationship(...args: any[]): void;

        keyForForeignKey(...args: any[]): void;

        keyForModel(...args: any[]): void;

        keyForRelationship(...args: any[]): void;

        keyForRelationshipIds(...args: any[]): void;

        static extend(protoProps: any, staticProps: any): any;

    }

    export class Serializer {
        constructor(...args: any[]);

        buildPayload(...args: any[]): void;

        getCoalescedIds(...args: any[]): void;

        getHashForIncludedResource(...args: any[]): void;

        getHashForPrimaryResource(...args: any[]): void;

        getHashForResource(...args: any[]): void;

        getKeysForIncluded(...args: any[]): void;

        isCollection(...args: any[]): void;

        isModel(...args: any[]): void;

        isModelOrCollection(...args: any[]): void;

        keyForAttribute(...args: any[]): void;

        keyForCollection(...args: any[]): void;

        keyForEmbeddedRelationship(...args: any[]): void;

        keyForForeignKey(...args: any[]): void;

        keyForModel(...args: any[]): void;

        keyForPolymorphicForeignKeyId(...args: any[]): void;

        keyForPolymorphicForeignKeyType(...args: any[]): void;

        keyForRelationship(...args: any[]): void;

        keyForRelationshipIds(...args: any[]): void;

        keyForResource(...args: any[]): void;

        mergePayloads(...args: any[]): void;

        normalize(...args: any[]): void;

        serialize(...args: any[]): void;

        serializerFor(...args: any[]): void;

        static extend(protoProps: any, staticProps: any): any;

    }

    export class Server {
        constructor(...args: any[]);

        build(...args: any[]): void;

        buildList(...args: any[]): void;

        config(...args: any[]): void;

        create(...args: any[]): void;

        createList(...args: any[]): void;

        factoryFor(...args: any[]): void;

        isTest(...args: any[]): void;

        loadConfig(...args: any[]): void;

        loadFactories(...args: any[]): void;

        loadFixtures(...args: any[]): void;

        passthrough(...args: any[]): void;

        resource(...args: any[]): void;

        shouldLog(...args: any[]): void;

        shouldTrackRequests(...args: any[]): void;

        shutdown(...args: any[]): void;

    }

    export const defaultPassthroughs: string[];

    export function Factory(): any;

    export function association(traitsAndOverrides: any): any;

    export function belongsTo(args: any): any;

    export function hasMany(args: any): any;

    export function trait(extension: any): any;

    export namespace Factory {
        function extend(attrs: any): any;

        function extractAfterCreateCallbacks({
            traits
        }: any): any;

        function isTrait(attrName: any): any;

    }

}

